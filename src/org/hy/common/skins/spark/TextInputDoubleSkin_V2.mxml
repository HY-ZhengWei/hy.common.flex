<?xml version="1.0" encoding="utf-8"?>
<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->
<!--- The default skin class for Spark TextInput component.  

     @see spark.components.TextInput
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
    alpha.disabledStates="0.5" blendMode="normal">

    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.TextInput")]
    ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
        import mx.core.FlexVersion;
			
		import org.hy.common.Help;
        
        private var paddingChanged:Boolean;
        
        /* Define the skin elements that should not be colorized. */
        static private const exclusions:Array = ["background", "textDouble", "promptDisplay", "border"];
        
        /* exclusions before Flex 4.5 for backwards-compatibility purposes */
        static private const exclusions_4_0:Array = ["background", "textDouble", "promptDisplay"];
        
        /**
         * @private
         */
        override public function get colorizeExclusions():Array 
        {
            // Since border is styleable via borderColor, no need to allow chromeColor to affect
            // the border.  This is wrapped in a compatibility flag since this change was added  
            // in Flex 4.5
            if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
            {
                return exclusions_4_0;
            }
            
            return exclusions;
        }
        
        /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
        static private const contentFill:Array = ["bgFill"];

        /**
         *  @private
         */
        override public function get contentItems():Array {return contentFill};
        
        /**
         *  @private
         */
        override protected function commitProperties():void
        {
            super.commitProperties();
            
            if (paddingChanged)
            {
                updatePadding();
                paddingChanged = false;
            }
        }
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         *  @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
        {
            if (getStyle("borderVisible") == true)
            {
                border.visible = true;
                shadow.visible = true;
                background.left = background.top = background.right = background.bottom = 1;
                textDouble.left = textDouble.top = textDouble.right = textDouble.bottom = 1;
                if (promptDisplay)
                {
                    promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
                    promptDisplay.setLayoutBoundsPosition(1, 1);
                }
            }
            else
            {
                border.visible = false;
                shadow.visible = false;
                background.left = background.top = background.right = background.bottom = 0;
                textDouble.left = textDouble.top = textDouble.right = textDouble.bottom = 0;
                if (promptDisplay)
                {
                    promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                    promptDisplay.setLayoutBoundsPosition(0, 0);
                }
            }
            
            borderStroke.color = getStyle("borderColor");
            borderStroke.alpha = getStyle("borderAlpha");
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }

        /**
         *  @private
         */
        private function updatePadding():void
        {
            if (!textDouble)
                return;
            
            // Push padding styles into the textDouble
            var padding:Number;
            
            padding = getStyle("paddingLeft");
            if (textDouble.getStyle("paddingLeft") != padding)
			{
                textDouble.setStyle("paddingLeft", padding);
			}
            
            padding = getStyle("paddingTop");
            if (textDouble.getStyle("paddingTop") != padding)
			{
                textDouble.setStyle("paddingTop", padding);
			}
            
            padding = getStyle("paddingRight");
            if (textDouble.getStyle("paddingRight") != padding)
			{
                textDouble.setStyle("paddingRight", padding);
			}
            
            padding = getStyle("paddingBottom");
            if (textDouble.getStyle("paddingBottom") != padding)
			{
                textDouble.setStyle("paddingBottom", padding);
			}
            
            if (!promptDisplay)
                return;
            
            padding = getStyle("paddingLeft");
            if (promptDisplay.getStyle("paddingLeft") != padding)
                promptDisplay.setStyle("paddingLeft", padding);
            
            padding = getStyle("paddingTop");
            if (promptDisplay.getStyle("paddingTop") != padding)
                promptDisplay.setStyle("paddingTop", padding);
            
            padding = getStyle("paddingRight");
            if (promptDisplay.getStyle("paddingRight") != padding)
                promptDisplay.setStyle("paddingRight", padding);
            
            padding = getStyle("paddingBottom");
            if (promptDisplay.getStyle("paddingBottom") != padding)
                promptDisplay.setStyle("paddingBottom", padding);
        }
        
        /**
         *  @private
         */
        override public function styleChanged(styleProp:String):void
        {
            var allStyles:Boolean = !styleProp || styleProp == "styleName";

            super.styleChanged(styleProp);
            
            if (allStyles || styleProp.indexOf("padding") == 0)
            {
                paddingChanged = true;
                invalidateProperties();
            }
        }
        ]]>
    </fx:Script>
    
    <fx:Script>
        <![CDATA[
			
		[Bindable]
		public var hintTopLeftColor:uint     = Help.toColor("0xFF4444");
		
		[Bindable]
		public var hintTopRightColor:uint    = Help.toColor("0xFF4444");
		
		[Bindable]
		public var hintBottomLeftColor:uint  = Help.toColor("0xFF4444");
		
		[Bindable]
		public var hintBottomRightColor:uint = Help.toColor("0xFF4444");
		
		/** 绘制三角形的大小 */
		[Bindable]
		public var hintSize:uint             = 8;
		
		
		
		/**
		 * 设置所有提示是否显示或隐藏
		 */
		public function set hintAllVisible(i_Visible:Boolean):void
		{
			this.hintTopLeft    .visible = i_Visible;
			this.hintTopRight   .visible = i_Visible;
			this.hintBottomLeft .visible = i_Visible;
			this.hintBottomRight.visible = i_Visible;
		}
		
		
		
		/**
		 * 设置所有提示的颜色
		 */
		public function set hintAllColor(i_Color:uint):void
		{
			this.hintTopLeftColor     = i_Color;
			this.hintTopRightColor    = i_Color;
			this.hintBottomLeftColor  = i_Color;
			this.hintBottomRightColor = i_Color;
		}
		
		
		
        /** 
         * @private 
         */     
        private static const focusExclusions:Array = ["textDouble"];

        /**
         *  @private
         */
        override public function get focusSkinExclusions():Array { return focusExclusions;};
        ]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>
    
    <!-- border --> 
    <!--- @private -->
    <s:Rect left="0" right="0" top="0" bottom="0" id="border">
        <s:stroke>     
            <!--- @private -->
            <s:SolidColorStroke id="borderStroke" weight="1" />
        </s:stroke>
    </s:Rect>

    <!-- fill -->
    <!--- Defines the appearance of the TextInput component's background. -->
    <s:Rect id="background" left="1" right="1" top="1" bottom="1">
        <s:fill>
            <!--- @private Defines the background fill color. -->
            <s:SolidColor id="bgFill" color="0xFFFFFF" />
        </s:fill>
    </s:Rect>
    
    <!-- shadow -->
    <!--- @private -->
    <s:Rect left="1" top="1" right="1" height="1" id="shadow">
        <s:fill>
            <s:SolidColor color="0x000000" alpha="0.12" />
        </s:fill>
    </s:Rect>
	
    <!-- text -->
    <!--- @copy spark.components.supportClasses.SkinnableTextBase#textDouble -->
    <s:RichEditableText id="textDouble"
              			verticalAlign="middle"
              			widthInChars="10"
              			left="1" right="1" top="1" bottom="1"
						/>
	
	<!-- ZhengWei(HY) Add 2015-12-09 顶部左边的提示三角形 -->
	<s:Path id="hintTopLeft" visible="false" data="M{hintSize} 1 1 1 1 {hintSize}Z">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFillHintTopLeft" color="{hintTopLeftColor}" />
		</s:fill>
	</s:Path>
	
	<!-- ZhengWei(HY) Add 2015-12-09 顶部右边的提示三角形 -->
	<s:Path id="hintTopRight" visible="false" data="M{hintSize} 1 {hintSize} {hintSize} 1 1Z" right="1" top="1">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFillHintTopRight" color="{hintTopRightColor}" />
		</s:fill>
	</s:Path>
	
	<!-- ZhengWei(HY) Add 2015-12-09 底部左边的提示三角形 -->
	<s:Path id="hintBottomLeft" visible="false" data="M1 {hintSize} {hintSize} {hintSize} 1 1Z" left="1" bottom="1">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFillHintBottomLeft" color="{hintBottomLeftColor}" />
		</s:fill>
	</s:Path>
	
	<!-- ZhengWei(HY) Add 2015-12-09 底部右边的提示三角形 -->
	<s:Path id="hintBottomRight" visible="false" data="M{hintSize} 1 {hintSize} {hintSize} 1 {hintSize}Z" right="1" bottom="1">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFillHintBottomRight" color="{hintBottomRightColor}" />
		</s:fill>
	</s:Path>
	
    <!--- Defines the Label that is used for prompt text. The includeInLayout property is false so the prompt text does not affect measurement. -->
    <s:Label id="promptDisplay" maxDisplayedLines="1"
                verticalAlign="middle"
                mouseEnabled="false" mouseChildren="false"
                includeIn="normalWithPrompt,disabledWithPrompt" 
                includeInLayout="false"
                />

</s:SparkSkin>
